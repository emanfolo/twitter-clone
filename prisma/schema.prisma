// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String
  name       String
  username   String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  profile    Profile?
  tweets     Tweet[]
  retweets Retweet[]
  followedBy User[]   @relation("UserFollows", references: [id])
  following  User[]   @relation("UserFollows", references: [id])
  likes Like[]
  mentions Mention[] 
  notificationsReceived Notification [] 
  feedItems FeedItem[]
}

model Profile {
  id           Int     @id @default(autoincrement())
  image        String?
  header_image String?
  bio          String? @db.VarChar(280)
  userID       Int     @unique
  user         User    @relation(fields: [userID], references: [id])
}

model FeedItem {
  id  Int     @id @default(autoincrement())
  userID Int
  user User @relation(fields: [userID], references: [id])
  type String
  tweetID Int?
  tweet Tweet? @relation(fields: [tweetID], references: [id])
  retweetID Int?
  retweet Retweet? @relation(fields: [retweetID], references: [id])
  createdAt DateTime  @default(now())
}

model Tweet {
  id        Int       @id @default(autoincrement())
  contents  String    @db.VarChar(280)
  createdAt DateTime  @default(now())
  image     String?
  userID    Int
  user      User      @relation(fields: [userID], references: [id])
  hashtags  Hashtag[] @relation(references: [id])
  likes Like [] 
  retweets Retweet []
  mentions Mention[] @relation(references: [id])
  threadSuccessorID Int?
  threadSuccessor Tweet? @relation("TweetReply", fields: [threadSuccessorID], references: [id])
  threadPredecessor Tweet? @relation("TweetReply")
  notification Notification?
  feedItems FeedItem []
}

model Retweet {
  id        Int       @id @default(autoincrement())
  userID    Int
  user      User      @relation(fields: [userID], references: [id])
  tweetID Int 
  tweet Tweet @relation(fields: [tweetID], references: [id])
  createdAt DateTime  @default(now())
  @@unique([userID, tweetID], name: "TweetRetweetUserID")
  notification Notification?
  feedItem FeedItem?
}

model Hashtag {
  id       Int     @id @default(autoincrement())
  contents String  @unique
  tweets   Tweet[] @relation(references: [id])
}

model Like {
  id Int @id @default(autoincrement())
  userID    Int
  user      User      @relation(fields: [userID], references: [id])
  tweetID Int 
  tweet Tweet @relation(fields: [tweetID], references: [id])
  createdAt DateTime  @default(now())
  @@unique([userID, tweetID], name: "TweetLikeUserID")
  notification Notification?

}

model Mention {
  id Int @id @default(autoincrement())
  username String @unique
  user User @relation(fields: [username], references: [username])
  tweets Tweet [] @relation(references: [id])
  notification Notification?
}

model Notification {
  id Int @id @default(autoincrement())
  createdAt DateTime  @default(now())
  recipientID Int 
  recipient User @relation( fields: [recipientID], references: [id])
  type String
  mentionID Int?
  mention Mention? @relation(fields: [mentionID], references: [id])
  likeID Int?
  like Like? @relation(fields: [likeID], references: [id])
  retweetID Int?
  retweet Retweet? @relation(fields: [retweetID], references: [id])
  replyID Int?
  reply Tweet? @relation(fields: [replyID], references: [id])
}
